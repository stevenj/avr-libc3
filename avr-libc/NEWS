*** Changes since avr-libc-1.4.8:

*** Changes in avr-libc-1.4.8:

* Bugs fixed:

  [no-id]  iscntrl() return true for some values from 0x80 to 0xff.
  [sourceforge.net: #1836849] Multiplication does not work for AT90USB162
  [#18994] minor optimization possible to stdlib functions isspace(),
           isprint(), and islower()
  [#21484] Documentation build for avr/version.h does not susbstitute autoconf
           macros
  [#21521] incorrect bit definitions in iotnx61.h
  [#21626] Incorrect Bit Definition for ADC14 and ADC15 Digital Input Disable
  [#21691] iomx8.h-> IVSEL and IVCE should not be available for ATmega48
  [#21743] AT90PWM316 missing PSOC1 bit definitions
  [#21749] AT90PWM316: _VECTORS_SIZE should be 128
  [#21840] RAMEND wrong for ATmega48P/88P/168P
  [#22153] setjmp.o is wrong in libc.a (1.6.1) for avr's with SPH

  * Other changes:

  - Added 'avr35' architecture. Now 'MOVW' and 'LPM Rx, Z[+]' instructions
    supported for AT90USB82 and ATt90USB162 devices. GCC 4.3 or above is 
    necessary to use this. 

* New devices supported:

  + ATmega1284P
  + ATmega32HVB

*** Changes in avr-libc-1.4.7:

* Bugs fixed:

  [no-id]  Make documentation build work with doxygen 1.5.x
  [#18373] Bugs in Inline ASM documentacion
  [#18964] USART definitions *wrong* in iocanxx.h
  [#19496] Add documentation: how to build toolchain for Windows.
  [#19686] alloc declaration missing
  [#20248] FAQ#3: clarify which registers are safe to be used
  [#20276] power.h missing ATmega644Ppower_XXX_[en/dis]able() macros
  [#20435] Bit name definitions for AT90PWM3
  [#20530] Bug in sample code for early wdt disable
  [#20650] Missing description of AVR specific C-preprocessor macros
  [#20682] Bad bit name in avr/io2313.h - Sugestion
  [#20843] Mega 2561 library
  [#21174] assembly error with targets at90s1200, attiny11, attiny12,
           and attiny28
  [#21183] Fix Program Space example code.
  [#21204] iotnx61.h PRR bits incorrect
  [#21228] Missing 3rd clause in BSD license in documentation pages
  [#21299] Duplicate register address in iotn48.h.
  [#21411] Typographical error in 'iotn13.h'
  [#21432] Incorrect timer interrupt handler names for ATtiny45
  [#21434] Bit name definitions for AT90CANxxx
  [#21444] Undocument -minit-stack

* New devices supported:

  + AT90PWM216
  + AT90PWM316
  + ATtiny43U
  + ATtiny48
  + AT90PWM2B
  + AT90PWM3B
  + ATmega48P
  + ATmega88P
  + ATmega168P
  + ATmega328P
  + ATtiny88

* Other changes:

  [patch #6236] Improving _delay_us and _delay_ms

*** Changes in avr-libc-1.4.6:

* Bugs fixed:

  [no-id]  Exclude 64-bit types for -mint8.
  [#18115] online documentation typo/bug avr/boot.h
  [#18385] SPM_PAGESIZE wrong value for ATmega164p and ATmega324p
  [#18509] strtod.S crashes due to stack problem with atmega 2560
  [#18662] rand() keeps returning the same value if seeded with 0
  [#18686] AT90USB**** devices are absent in interrupt-verctor-names table
  [#18688] vfscanf and vfprintf don't use malloc
  [#18726] the dtostrf function description is missing in AVR-Libc's webpage
  [#18899] atoi and atol do not handle vertical tab properly
  [#18903] ATmega644 register definitions for SPI and PRR (datasheet vs. 
           iom*.h)
  [#18915] PWM1X Bit missing for ATtiny261/461/861
  [#19009] Make <util/delay.h> issue a warning when optimizations are turned off
  [#19050] gcrt1.S should call main rather than jumping to it
  [#19060] PCMSKx registers transposed in header for attinyX61
  [#19134] strcasecmp(): result	sign is not changed by swaping args
  [#19135] strstr(): `needle' is not always founded
  [#19280] snprintf(s,0,fmt,...) write to foreign memory: s[-1]
  [#19281] isblank('\v') return TRUE: mismatch to C99
  [#19445] _malloc_heap_end does not follow _heap_end on m2561
  [#19495] documentation: fix inclusion of cli and sei macros
  [#19650] avr-libc: wrong named bit in SFR of AT90PWMx
  [#19666] AT90PWMx: Another patch for the include file (missing SFR)
  [#19841] Error building 1.4 HEAD: undefined reference to 'exit'

* New devices supported:

  + AT90USB82
  + AT90USB162
  + ATmega325P
  + ATmega3250P
  + ATmega329P
  + ATmega3290P
  + AT90PWM1
  + ATmega8HVA
  + ATmega16HVA

* Other changes:

  - The "largedemo" has been ported to the ATtiny2313.

  - Integrate a copy of the license file into the documentation.

  - Include an alphabetical index of all globals (functions,
    macros, types, variables) into the documentation.

  - Added 'avr25' architecture. Now 'MOVW' and 'LPM Rx, Z[+]' instructions
    supported for AT86RF401, ATtiny13, ATtiny2313, ATtiny24, ATtiny25,
    ATtiny261, ATtiny44, ATtiny45, ATtiny461, ATtiny84, ATtiny85 and
    ATtiny861 devices. GCC 4.2 or above is necessary to use this.

* New functions:

  memchr_P
  memcmp_P
  memmem, memmem_P
  memrchr, memrchr_P
  strcasestr, strcasestr_P
  strchrnul, strchrnul_P
  strchr_P
  strcspn, strcspn_P
  strpbrk, strpbrk_P
  strrchr_P
  strsep_P
  strspn, strspn_P

* Optimized functions:

  atoi
  atol
  strchr
  strcmp, strcmp_P
  strlwr
  strrev
  strsep
  strstr, strstr_P
  strupr

*** Changes in avr-libc-1.4.5:

* Bugs fixed:

  [no-id]  Make include/avr/sfr_defs.h -Wundef safe.
  [no-id]  Make include/avr/eeprom.h -Wundef safe.
  [no-id]  Fix the timing of the HD44780 driver in the stdiodemo.
  [#15512] Bootloader macros not interrupt safe.
  [#16125] HD44780 data bit assignment restrictive
  [#16434] EMPTY_INTERRUPT has no misspelled vector checking
  [#16411] Add 'used' and 'externally_visible' attributes to all ISR macros.
  [#16441] eeprom.h should use __asm__
  [#16868] depricated.h: outp() arguments order misprint
  [#17068] wdt.h file: __AVR_ATmeg324P__ spelling mistake
  [#17470] Add API for CLKPR register.
  [#17551] Update documentation to point to issues with gcc4.1
  [#17591] /avr-libc/libm/fplib/fp_split.S error return will fail for
           3-Byte PC devices
  [#17608] Add ISR_ALIAS() to avr/interrupt.h

* Other changes:

  - New Power Management API in <avr/power.h>. This provides C language
    macros to manipulate the Power Reduction Register(s) and the System Clock
    Prescaler register across multiple processors.

* New devices supported:

  + ATmega165P
  + ATmega169P
  + ATmega2560 [patch #4461]
  + ATmega2561 [patch #4461]
  
*** Changes in avr-libc-1.4.4:

* Bugs fixed:

  [no-id]  Fix location of OCR1 in simple demo for ATmega16/32
  [no-id]  Typo in iomxx0_1.h: PRUSART3.
  [no-id]  Fix the sleep mode definitions for the ATtiny2313.
  [#15519] AT90CAN* processors incorrectly identified as "AT90S family"
  [#15522] Typo in iotn2313.h vector table
  [#15559] Wrong macro for boot_page_write(address) and ATmega128
  [#15574] unneeded compatibility break
  [#15595] GPIOR0 misspelled for ATtiny25/45/85
  [#15732] interrupt.h: ISR() incompatibility with gcc 3.4.5
  [#15890] missing /devtools/gen-avr-lib-tree.sh
  [#16039] Names in Pxy (i.e. PA0) style of ports pins for some devices are
           not defined.
  [#16260] _crc16_update lacks C equivalent

* Other changes:

  - The simple demo has been ported to ATmega640, ATmega644P,
    ATmega1280, ATmega1281.

* New devices supported:

  + ATmega406
  + ATmega169 Rev. F
  + AT90USB646
  + AT90USB647
  + AT90USB1286
  + AT90USB1287
  + ATmega164P (renamed from ATmega164)
  + ATmega324P (renamed from ATmega324)
  + ATmega644P

*** Changes in avr-libc-1.4.3:

* Bugs fixed:

  [no-id]  Not defined SPM_PAGESIZE for ATtinyX4/X5/X61 and ATtiny2313 devices.
  [#15494] Compile warning and errors if compiler flag -Wundef flag specified

*** Changes in avr-libc-1.4.2:

* Bugs fixed:

  [no-id]  Fix the examples installation for non-doc builds.
  [no-id]  Fix the spelling of the OCR1A/B registers in ATtinyX4 devices.
  [no-id]  LED1/2 don't work in the largedemo on an ATmega16.
  [#15266] Function ldexp incorrectly processes overflow and underflow cases.

* Other changes:

  - The simple demo has been ported to ATmega8515, ATmega8535,
    ATmega164, ATmega165, ATmega169, ATmega324, ATmega325, ATmega3250,
    ATmega329, ATmega3290, ATmega644, ATmega645, ATmega6450,
    ATmega649, ATmega6490, ATtiny2313, ATtiny24, ATtiny25, ATtiny26,
    ATtiny261, ATtiny44, ATtiny45, ATtiny461, ATtiny84, ATtiny85,
    ATtiny861.

  - More overhaul of the demo documentation, don't use the "squid"
    cable for the largedemo as it is not part of the STK500.

* New devices supported:

  + ATtiny261
  + ATtiny461
  + ATtiny861

*** Changes in avr-libc-1.4.1:

* Bugs fixed:

  [#15161] util/delay.h misses inline keyword (regression)
  [#15193] incorrect definition of IVSEL bit in MCUCR register

* Other changes:

  [patch #4611] sleep.h sleep_mode() not interrupt safe

  - The simple demo has been modernized a bit.  Documentation now
    generally refers to the ATmega8 rather than the AT90S2313, and
    the #ifdef spaghetti has been moved out into iocompat.h.

  - A new demo project ("largedemo") has been added.  It extends
    the simple demo by adding some controls, and thereby touches
    a good number of avr-libc concepts.

  - Another demo project ("stdiodemo") has been added.  It
    demonstrates the setup of the standard IO facilities using
    a practical small application.

  - The demo projects now install their source code as part of
    the documentation tree.

* New devices supported:

  + ATtiny24
  + ATtiny44
  + ATtiny84

* New functions:

   strstr_P (Contributed by Werner Boellmann)

*** Changes in avr-libc-1.4.0:

* Major API changes:

  - The INTERRUPT() macro has been deprecated, and it will be
    removed in a future version.  Use __attribute__((interrupt))
    explicitly if this functionality is really needed.

  - A new ISR() macro has been added, and is now the preferred
    for to introduce an interrupt service routine.  It is
    equivalent to the old SIGNAL() macro, which might become
    deprecated in a future version.

  - A new header file, <compat/deprecated.h> has been established.
    Its purpose is to collect deprecated items from older versions of
    the library, starting out with the enable_external_int(),
    timer_enable_int(), and INTERRUPT() macros/functions, as well as
    the old obsoleted inp/outp/sbi/cbi macros.

  - A new include file subdirectory named "util/" has been created.
    The files <compat/twi.h>, <avr/crc16.h>, <avr/delay.h>, and
    <avr/parity.h> have been moved into the new util/ subdirectory.

  - A new set of interrupt vector names has been added, closely
    matching the names given in the datasheet, and more compatible to
    other compilers available for the AVR platform.  The table of
    interrupt vector names in the documentation is now automatically
    generated, and explicitly mentions the MCU type for each vector
    name.

  - The standard IO facilities API has been enhanced

    . The backend functions put and get that are passed to fdevopen()
      during the setup of a stream now take the stream itself as an
      additional argument.
      By defining the macro __STDIO_FDEVOPEN_COMPAT_12 before
      including <stdio.h>, an fdevopen() function prototype will be
      declared that is backwards-compatible with avr-libc version
      1.2 and before.
    . It is possible to tie user data to a stream using
      fdev_set_udata(), and to retrieve them using fdev_get_udata().
      Together with the additional argument to the backend functions,
      these functions can now e.g. keep track of internal user state,
      or distinguish two different devices using the same backend
      function.
    . The get backend function can now return _FDEV_EOF to indicate an
      end-of-file condition, in addition to _FDEV_ERR for an error
      condition.  This will affect the internal state that can be
      queried using the standard feof() and ferror() functions.
    . A new macro fdev_setup_stream() is provided to setup a
      user-supplied stream without the need to call fdevopen(), and thus
      without requiring malloc().  A similar macro FDEV_SETUP_STREAM()
      exists that can be used to initialized a FILE object.  The
      floating-point implementations of vfscanf() and vfprintf() now
      allocate their conversion buffer on the stack, so they do not need
      malloc() anymore either.

  - An API has been added to track the library version number.  See the
    documentation of the new header file <avr/version.h>.

* Bugs fixed:

  [#3573] Make local symbols in .S files truely local
  [#12324] overview: boot_page_write_safe, etc.
  [#12333] Standard requires libstdc to define vprintf and vscanf
  [#12495] about Busy-wait delay loops(document)
  [#12496] about set_sleep_mode() and tiny26/tiny2313
  [#12735] No support for AT94K devices in sleep.h
  [#12739] Gcc assumes that target libc provides ffs function
  [#12775] Possible Bug in sscanf on string end
  [#13340] Math lib documentation/lib mismatch
  [#13557] small typo in avr-libc-user-manual-1.2.3
  [#14224] _delay_ms() not inlining if called more than once in a unit
  [#14241] 'eeprom_is_ready' is not compiled with ATmega48
  [#14262] avr-libc documentation error about .init sections
  [#14266] use __extension__ in avr-libc header files
  [#14327] wdt_disable() missing a cli
  [#14378] EEPROM library d'not support at86rf401 device
  [#14380] configure/make work only in source directory
  [#14433] Improve documentation of <avr/delay.h>
  [#14486] some macros from boot.h doesn't compile correctly
  [#14503] strnlen_P is wrong with classic AVRs
  [#14798] several IO registers definition issue in header files
  [#14852] fp pow function broken for negative x

* Other changes:

  [patch #3592] speedup tanh function in libm
  [patch #3750] Allow passing user data to stdio fdevopen() get and
                put methods.  (This is part of the API changes
                mentioned above.)
  [patch #3780]	<assert.h> header
  [patch #3781] add dummy fflush() to <stdio.h>
  [patch #3782] modernize <stdint.h>
  [patch #3912] Fix ctype.S linker error due to asm branches out
                of range
  [patch #3925] Dallas iButton 8-bit CRC
  [patch #4087] C99 conformal headers stdint.h and inttypes.h
  [patch #4505] Unified interrupt vector names in header files
  [patch #4557] Adds to the fplib usage of MUL instruction 
                in group avr4; avr5 devices
  [patch #4608] rpm spec file update
  [patch #4622] unify doc file location in rpms

  - Update the build system to recent versions of autoconf/automake;
    the old "doconf" and "domake" scripts are gone now, "reconf" has
    been renamed to "bootstrap".
  - Update the documentation system to doxygen >= 1.4.1.
  - Major overhaul of the documentation, new layout of the HTML pages,
    several clarifications and additions.
  - Add support for the following new devices (depending on the ability
    of the compiler/binutils to handle them):
    . AT90CAN32/64
    . AT90PWM2(B)/3(B)
    . ATmega329/3290/649/6490
    . ATtiny25/45/85
    . ATmega164/324/644
    . ATmega640/1280/1281
  - The library is now compiled with -Os for avr3 and avr5 MCUs (i.e.
    for those with > 8 KB of ROM); used to be -O3 before.

* New string functions. Contributed by Dmitry Xmelkov.

  ffs
  ffsl
  ffsll
  _FFS (macro)

* Optimized functions.

  misc/itoa
  misc/ltoa
  misc/utoa
  misc/ultoa
  stdlib/longjmp
  string/memchr
  string/memccpy
  string/strchr
  string/strrchr
  string/strsep
  string/strstr

*** Changes since avr-libc-1.2.4:

* Bugs fixed:

  [no-id]  EEPROM handling not working for AT90CAN128 ATmega48 ATmega88
	   ATmega165 ATmega168 ATmega169 ATmega325 ATmega3250 ATmega645
	   ATmega6450
  [#12646] strtod returns error for valid input (patch#4137)
  [#13341] Remove ADHSM bit from header files.

* Other improvements:

  [patch#4189] Document replacement for sbi/cbi instructions

* boot.h: implement boot_lock_fuse_bits_get() plus macros for the
          respective addresses (low/high/ext fuse, lock bits)


*** Changes since avr-libc-1.2.3:

* Bugs fixed:

  [no-id]  Work around a bug in gas that made the weak symbol __stack
           fixed inside gcrt1.S (since the assembler already inserted
           its value).
  [no-id]  Modify the doxygen build system to cope with artefacts from
           recent versions of doxygen and (pdfelatex-based) LaTeX.
  [#12033] macros.inc need to be protected from multiple inclusion.
  [#12040] overview: sbi in FAQ
  [#12134] ADC register name definitions
  [#12422] Add new bit definitions for LCDCCR register in iom169.h.
  [#12448] Fix bit definition for SJW0 in iocan128.h
  [#12785] Fix documenation for log10() function in math.h.
  [#12955] Signal name misprints: SIG_COMPERATOR in iom169.h,
           SIG_EPROM_READY in iotn26.h
  [#12993] Signal "__EICR" redefined warning ATmega8
  [#13290] avr/io.h EEAR def is flawed for the Mega48
  [#13327] Fix bit definition for UCSZ02 in iom325.h, iom3250.h,
           iom645.h, iom6450.h
  [#13678] The _wdt_write(value) macro in wdt.h doesn't work with
           the ATmega325.(also with ATmega3250, ATmega645, ATmega6450,
           ATmega165).

* demo.c extended for ATmega16

*** Changes since avr-libc-1.2.2:

* Bugs fixed:

  [#11987] sscanf parsing problem : leading zero ignored in %u

*** Changes since avr-libc-1.2.1:

* Bugs fixed:

  [#11805] Fix call to __fp_cosinus in sin().
  [#11817] Replace SYSCLK with F_CPU in twitest example.
  [#11868] realloc doesn't work correctly on block at end of freelist
           when growing
  [#11898] Change optimisation level for building printf libraries to -Os.


*** Changes since avr-libc-1.2.0:

* Bugs fixed:

  [no-id]  Prefix all internal global symbols in libm with __fp_ so
           they do not collide with the application namespace.
  [#4101]  setjmp/longjmp destroy changes in global registers.
  [#11479] Add missing pin definitions for iotn16.h.
  [#11486] Put the port bit defintions back in for mega16.
  [#11494] strtol() return wrong value in the underflow case
  [#11505] Remove doxygen comment about the deprecated inp/outp items.
  [#11510] Abstract the change enable bit in wdt.h for mega32.
  [#11522] Rewrite wdt_disable() to match datasheet algorithm.
  [#11684] realloc overwrites first to bytes of memory block when shrinking
  [patch #3618] Optimization strtol(), a little (related to bug #11494).
  [#11732] Update doc/examples/progmem.c to use the latest API.

* Extend stdio and pmstring APIs:

Implement patch #3516: printf: Handling of argument strings from
program memory

The %S format can now be used to print strings that are located in
program-space memory (aka. ROM).

As a prerequisite for this, the function strnlen_P() has been added
which is similar to strnlen() except that it takes a pointer to a
program-space string.

*** Changes in avr-libc-1.2:

* Bugs fixed:

  [no-id] Fix TICIE1 value in usb header files.
  [no-id] Fix bug introduced in fix for bug #7802 (missing parens).
  [no-id] Move ATtiny2313 and ATtiny13 from avr4 to avr2 (by now).
  [#2143] malloc() routines chunk smaller than requested
  [#5454] Inline functions results in undefined reference when optimize level 0
          is used.
  [#5799] error(?) in iom162.h
  [#2233] Documentation issues with inline asm
  [#6352] Sleep mode for ATmega162, ATmega161, and ATmega8515 
  [#7469] "Problem" by using the library function "boot_lock_bits_set"
  [#7556] printf and friends improperly handle non-null terminated strings when
          a %s argument has a precision.
  [#7802] vfscanf problem with unsigned long (patch #2554)
  [#7989] dtostrf() destroys string pointer registers?
  [#8119] _wdt_write macro in wdt.h doesn't work with ATmega169
  [#8391] Fuse mask in boot.h wrong?
          NOTE: boot_lock_bits_set() was broken. Please see the new
          documentation for examples of how the new version works.
  [#8452] some SFR and bit names in iom169.h are incorrect
          NOTE: Where possible, the old names are retained to avoid breaking
          existing code, but the OCR1A and OCR1B names where just plain wrong
          so they have been changed and the incorrect names (OCRA1 and OCRB1)
          are undefined.
  [#8649] sfr_defs.h: missed _SFR_BYTE() in bit_is_set/clear
  [#9345] Zero-Padding on vfprintf
  [#10150] Update release versions compatible with avr-libc and instructions.
  [#10489] Sleep mode for atmega48/88/168 family 
  [#10733] Fix bit identifer ADFR to ADATE in mega64.
  [#10828] Fix licenses on files to have same BSD license.
  [#11242] Add the EEARH register definition for the mega48.
  [#11275] fdevopen() should document its use of malloc()
  [#11315] Add USART* signal names to match datasheet for mega32 and mega16.
  [#11405] Add USART* signal names to match datasheet for mega128.
  [#11418] Add PRR register and bit definitions for mega169.
  [#11425] sleep.h missing semicolon

* Remove deprecated items:
  + obsolete headers from the base include directory (moved to the avr/
    subdirectory long ago)
  + deprecated macros and functions from
    . <avr/eeprom.h> (eeprom_rb, eeprom_rw, eeprom_wb),
    . <avr/io.h>  (cbi, sbi, inb, outb, inw, outw, inp, outp, BV),
    . <avr/pgmspace.h> (PRG_RDB).
  + . <avr/timer.h> removed completely.

* Moved header files:

  + <avr/ina90.h> moved to <compat/ina90.h>
  + <avr/twi.h> moved to <compat/twi.h>

* New devices supported:

  + ATmega165
  + ATmega325
  + ATmega3250
  + ATmega645
  + ATmega6450
  + ATmega48
  + ATmega88
  + ATmega168
  + ATtiny13
  + ATtiny2313
  + AT90CAN128

* Pin names for ports are now consistent for all devices.

* dtostrf() now uses movw where possible

* realloc() has been implemented.

* Extend pgmspace API.

The pgmspace API has had the following macros added to allow accessing of
unsigned 32-bit values:

  pgm_read_dword_near
  pgm_read_dword_far
  pgm_read_dword

* Change boot API.

The boot API internals have changed such that it is not compatible with the
1.0.x API.

These macros have been changed so that they no longer wait for SPM and EEPROM
operations to complete. It turns out that doing those checks all the time is
not needed and tends to bloat the code. Removing the checks allows you to
write more compact code (see the example in avr/boot.h).

  boot_page_fill
  boot_page_erase
  boot_page_write
  boot_rww_enable
  boot_lock_bits_set

If you want the old behaviour (1.0.x compatible), use these new macros:

  boot_page_fill_safe
  boot_page_erase_safe
  boot_page_write_safe
  boot_rww_enable_safe
  boot_lock_bits_set_safe

* Extend eeprom API.

New macro:
  eeprom_busy_wait

* Extend crc16 API.

New functions:
  _crc_xmodem_update
  _crc_ccitt_update

* Extend stdio API.

New functions:
  vfprintf_P
  vfscanf_P
  vsprintf
  vsprintf_P
  vsnprintf
  vsnprintf_P

* Extend malloc API.

Implement realloc().

* Extend delay API (<avr/delay.h>).

Implement inline functions for specifying delays in microseconds, or
milliseconds directly (based on the macro F_CPU specifying the CPU
clock frequency).

* Documentation changes:

  + Use newer Doxygen.
  + Many fixes and added documentation.
  + Unix-style man pages are generated now when doc generation has been
    enabled in ./configure

* Optimize slightly strtol and strtoul functions.

* Unified copyright.

All of the avr-libc files are now distributed under a single license.
All of the authors of the files agreed to this step.  The new license
is a 3-clause simplified ``BSD-style'' license which is believed to be
fully compatible with the GPL on one hand, yet imposes as minimal
restrictions as possible for any kind of commercial use in
applications based on avr-libc.

To build the documentation, doxygen-1.3.4 or newer is strongly recommended.

*** Changes in avr-libc-1.0:

* Move source to cvs repositiory at http://savannah.gnu.org/projects/avr-libc

Anonymous cvs access to the source is now available. There is also a mailing
list set up for discussion of development of avr-libc.

* License changes.

All the files in the project now are covered by a modified BSD license. This 
allows royalty free use of the library in commerical products. All of the 
public domain files in the project have been switched to the new license and
copyright given to the contributors of the files.

There were some files taken from GNU GPL'd projects which were removed from
avr-libc to simplify the licensing. The removed files only supplied alternate
implementations, so nothing was lost by their removal.

* Requires latest binutils and gcc

Marek did some fairly major work with binutils and gcc to make adding support
for new devices easier. His changes in those tools required changes to
avr-libc which make it incompatible with older versions of binutils and gcc.
Gcc versions >= 3.3 and binutils versions >= 2.13 are required.

* New malloc implementation.

Joerg Wunsch has supplied an improved malloc implementation which is less
prone to fragmentation.

* Documentation!

Joerg Wunsch and Ted Roth and have been working on using the doxygen program to
embed documentation comments into source code. Additionally, Harald Kipp's 
inline asm cookbook and Rich Neswold's Avr Tools document have been merged into
the user manual. The goal is to have a single place for all the documentation
a user would need to get started developing for AVR microcontrollers using
the GNU development tool chain.

The latest documentation is available online at
  http://www.freesoftware.fsf.org/avr-libc/

* I/O registers accessible directly in C expressions

You can now do this in your code:
  PORTA |= 0x02;

See the "Special Function Registers" documentation for details. This method is
preferred over the use of the deprecated inp(), inb(), inw(), outp(), outb()
and outw() functions.

* New devices supported

mega128
mega169
mega16
mega32
mega64 [untested]
mega8515 [untested]
mega8535 [untested]
tiny26
76c711
43usb320
43usb355
86rf401

* Improved trigonometrical functions:

Reiner Patommel provided complete rewrites for asin(), atan() and atan2()
that feature a better (for some argument ranges even much better)
accuracy than the previous versions.  Note that since acos() uses asin(),
it also benefits from this.

* Incompatibilities with previous version.

The arguments for outb()/outw() have been reversed.
  (value,port) -> (port,value)

* New pgmspace.h API.

Changed function names and added new functions to read the Program Space
FLASH. Added new functions to read 16-bit (word) values. The new API should 
also clear up problems with reading data from devices with > 64K of FLASH.

The API now includes:
pgm_read_byte       (maps to the *_near function below)
pgm_read_word       (maps to the *_near function below)
pgm_read_byte_near
pgm_read_word_near
pgm_read_byte_far
pgm_read_word_far


* New bootloader support API.

#include <avr/boot.h>

This provides bootloader support functions to those processors that have 
builtin bootloader support.

* inb / outb / inw / outw / cbi / sbi macros are deprecated.

* New string functions and optimized string functions.

strlcpy   (optimized)
strlcat   (optimized)
strsep    (new)
strtok_r  (new)
strlcat_P (new)
strlcpy_P (new)
strncat_P (new)

Contributed by Reiner Patommel with some work on strlcpy, strlcat by
Eric Weddington.

* New eeprom functions by Artur Lipowski <LAL@pro.onet.pl>

eeprom_write_word
eeprom_write_block


*** Changes up to avr-libc-20020203:

See the ChangeLog file up to 2002-02-03 for details.

